{"filter":false,"title":"cache_readerh.txt","tooltip":"/207SE-Networks-&-Security/8 - Caches/cache-example/cache_readerh.txt","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["#include <stdio.h>","#include <stdlib.h>","","//The internals of this struct aren't important","//from the user's point of view","typedef struct{","  FILE* file;        //File being read","  int bufferlength;  //Fixed buffer length","  int usedbuffer;    //Current point in the buffer","  char* buffer;      //A pointer to a piece of memory","                     //  same length as \"bufferlength\"","  int byte_tot;     //Integer to store the total amount of bytes that were read from the file.","} cr_file;","","","","","//Open a file with a given size of buffer to cache with","cr_file* cr_open(char* filename, int buffersize);","","","//Close an open file","void cr_close(cr_file* f);","","//Read a byte.  Will return EOF if empty.","char cr_read_byte(cr_file* f);","","","","//---------------------------------------------------------","","//Refill an empty buffer.  Not intended for users","int refill(cr_file* buff);",""]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":33,"column":0},"end":{"row":33,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":33,"state":"start","mode":"ace/mode/text"}},"timestamp":1416772482905,"hash":"a4163f568cebddf162ad4954e50f52362adc705c"}